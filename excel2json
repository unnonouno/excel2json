#!/usr/bin/env python

# Copyright (c) 2012 Yuya Unno.
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

import csv
import io
from contextlib import contextmanager
import sys


def _utf8_encoder(unicode_line):
    for line in unicode_line:
        yield line.encode('utf-8')


if sys.version_info[0] > 2:
    # CSV library for py3 originaly supports Unicode (str)
    UnicodeDictReader = csv.DictReader
    unicode_reader = csv.reader

else:
    # CSV library for py2 doesn't work with Unicode.
    # We need to covert unitcode to str and revret str to unicode.

    class UnicodeDictReader(csv.DictReader):

        def __init__(self, input, **kwds):
            csv.DictReader.__init__(self, _utf8_encoder(input), **kwds)

        def next(self):
            d = csv.DictReader.next(self)
            # Convert keys and values to Unicode
            return dict((k.decode('utf-8'), v.decode('utf-8'))
                        for k, v in d.items())

    def unicode_reader(input, **kwargs):
        for row in csv.reader(_utf8_encoder(input), **kwargs):
            urow = [d.decode('utf-8') for d in row]
            yield(urow)


@contextmanager
def open_excel_csv_as_dict(path):
    with io.open(path, 'rU', encoding='shift_jis') as input:
        yield UnicodeDictReader(input, dialect='excel')


@contextmanager
def open_excel_csv(path):
    with open(path, 'rU') as input:
        yield unicode_reader(input, dialect='excel')


if __name__ == '__main__':
    import argparse
    parser = argparse.ArgumentParser(
        description='Convert an Excel CSV file to a JSON.')
    parser.add_argument('-d', '--dict', action='store_true',
                        help='print as a dictionary.')
    parser.add_argument('file', metavar='FILE',
                        help='excel CSV file to open.')

    args = parser.parse_args()

    import json
    if args.dict:
        with open_excel_csv_as_dict(args.file) as input:
            for row in input:
                print(json.dumps(row))
    else:
        with open_excel_csv(args.file) as input:
            for row in input:
                print(json.dumps(row))

